Index: ProjetGL/ProjetGL/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\r\nURL configuration for ProjetGL project.\r\n\r\nThe `urlpatterns` list routes URLs to views. For more information please see:\r\n    https://docs.djangoproject.com/en/5.1/topics/http/urls/\r\nExamples:\r\nFunction views\r\n    1. Add an import:  from my_app import views\r\n    2. Add a URL to urlpatterns:  path('', views.home, name='home')\r\nClass-based views\r\n    1. Add an import:  from other_app.views import Home\r\n    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\r\nIncluding another URLconf\r\n    1. Import the include() function: from django.urls import include, path\r\n    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))\r\n\"\"\"\r\nfrom django.contrib import admin\r\nfrom django.urls import path\r\nfrom Prototype import views\r\nurlpatterns = [\r\n    path('admin/', admin.site.urls),\r\n    path('projets/', views.liste_projets, name='liste_projets'),\r\n    path('projets/all/', views.projects_summary, name='rapport_projets'),\r\n    path('projets/<int:projet_id>/', views.detail_projet, name='detail_projet'),\r\n\r\n]
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ProjetGL/ProjetGL/urls.py b/ProjetGL/ProjetGL/urls.py
--- a/ProjetGL/ProjetGL/urls.py	(revision ac784cf3b95edbd3c21877cbe757c598c38731ac)
+++ b/ProjetGL/ProjetGL/urls.py	(date 1731956764740)
@@ -17,6 +17,8 @@
 from django.contrib import admin
 from django.urls import path
 from Prototype import views
+
+
 urlpatterns = [
     path('admin/', admin.site.urls),
     path('projets/', views.liste_projets, name='liste_projets'),
Index: Prototype/migrations/0002_projet_membres_alter_projet_id_alter_tache_id_and_more.py
===================================================================
diff --git a/Prototype/migrations/0002_projet_membres_alter_projet_id_alter_tache_id_and_more.py b/Prototype/migrations/0002_projet_membres_alter_projet_id_alter_tache_id_and_more.py
deleted file mode 100644
--- a/Prototype/migrations/0002_projet_membres_alter_projet_id_alter_tache_id_and_more.py	(revision ac784cf3b95edbd3c21877cbe757c598c38731ac)
+++ /dev/null	(revision ac784cf3b95edbd3c21877cbe757c598c38731ac)
@@ -1,36 +0,0 @@
-# Generated by Django 5.1.3 on 2024-11-17 19:13
-
-import django.db.models.deletion
-from django.conf import settings
-from django.db import migrations, models
-
-
-class Migration(migrations.Migration):
-
-    dependencies = [
-        ('Prototype', '0001_initial'),
-        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
-    ]
-
-    operations = [
-        migrations.AddField(
-            model_name='projet',
-            name='membres',
-            field=models.ManyToManyField(related_name='projets', to=settings.AUTH_USER_MODEL),
-        ),
-        migrations.AlterField(
-            model_name='projet',
-            name='id',
-            field=models.AutoField(primary_key=True, serialize=False),
-        ),
-        migrations.AlterField(
-            model_name='tache',
-            name='id',
-            field=models.AutoField(primary_key=True, serialize=False),
-        ),
-        migrations.AlterField(
-            model_name='tache',
-            name='projet',
-            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='taches', to='Prototype.projet'),
-        ),
-    ]
Index: .idea/.gitignore
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
deleted file mode 100644
--- a/.idea/.gitignore	(revision ac784cf3b95edbd3c21877cbe757c598c38731ac)
+++ /dev/null	(revision ac784cf3b95edbd3c21877cbe757c598c38731ac)
@@ -1,8 +0,0 @@
-# Default ignored files
-/shelf/
-/workspace.xml
-# Editor-based HTTP Client requests
-/httpRequests/
-# Datasource local storage ignored files
-/dataSources/
-/dataSources.local.xml
Index: ProjetGL/manage.py
===================================================================
diff --git a/ProjetGL/manage.py b/ProjetGL/manage.py
deleted file mode 100644
--- a/ProjetGL/manage.py	(revision ac784cf3b95edbd3c21877cbe757c598c38731ac)
+++ /dev/null	(revision ac784cf3b95edbd3c21877cbe757c598c38731ac)
@@ -1,22 +0,0 @@
-#!/usr/bin/env python
-"""Django's command-line utility for administrative tasks."""
-import os
-import sys
-
-
-def main():
-    """Run administrative tasks."""
-    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ProjetGL.settings')
-    try:
-        from django.core.management import execute_from_command_line
-    except ImportError as exc:
-        raise ImportError(
-            "Couldn't import Django. Are you sure it's installed and "
-            "available on your PYTHONPATH environment variable? Did you "
-            "forget to activate a virtual environment?"
-        ) from exc
-    execute_from_command_line(sys.argv)
-
-
-if __name__ == '__main__':
-    main()
Index: Prototype/tests.py
===================================================================
diff --git a/Prototype/tests.py b/Prototype/tests.py
deleted file mode 100644
--- a/Prototype/tests.py	(revision ac784cf3b95edbd3c21877cbe757c598c38731ac)
+++ /dev/null	(revision ac784cf3b95edbd3c21877cbe757c598c38731ac)
@@ -1,3 +0,0 @@
-from django.test import TestCase
-
-# Create your tests here.
Index: Prototype/views.py
===================================================================
diff --git a/Prototype/views.py b/Prototype/views.py
deleted file mode 100644
--- a/Prototype/views.py	(revision ac784cf3b95edbd3c21877cbe757c598c38731ac)
+++ /dev/null	(revision ac784cf3b95edbd3c21877cbe757c598c38731ac)
@@ -1,61 +0,0 @@
-from django.shortcuts import render, get_object_or_404, redirect
-from django.contrib.auth.decorators import login_required
-from .models import Projet,Tache
-from django.contrib.auth.models import User
-from .forms import TacheForm
-
-@login_required
-def liste_projets(request):
-    projets = Projet.objects.all()
-    taches = Projet.objects.all()
-    return render(request, 'gestion_projets/liste_projets.html', {'projets': projets, 'tache': taches})
-
-@login_required
-def mes_projets(request,user_id):
-    user = get_object_or_404(User, id=user_id)
-    projets = user.projets.all()
-    return render(request,'gestion_projets/mes_projets.html',{'projets' : projets})
-
-@login_required
-def detail_projet(request, projet_id):
-    projet = get_object_or_404(Projet, id=projet_id)
-    taches = projet.taches.all()  # Utilise `related_name` pour accéder aux tâches
-
-    if request.method == 'POST':
-        form = TacheForm(request.POST)
-        if form.is_valid():
-            tache = form.save(commit=False)
-            tache.projet = projet
-            tache.save()
-            return redirect('detail_projet', projet_id=projet.id)
-    else:
-        form = TacheForm()
-
-    return render(request, 'gestion_projets/detail_projet.html', {'projet': projet, 'taches': taches,'form' : form})
-
-def supprimer_tache(request, tache_id):
-    tache = get_object_or_404(Tache, pk=tache_id)
-    projet_id = tache.projet.id
-    tache.delete()
-    return redirect('detail_projet', projet_id=projet_id)
-
-
-def login(request):
-    return render(request, 'login.html')
-
-
-@login_required
-def index(request):
-
-    projet = Projet.objects.all()
-    # Regrouper les tâches par statut
-    taches_a_faire = Tache.objects.filter(statut='a_faire')
-    taches_en_cours = Tache.objects.filter(statut='en_cours')
-    taches_terminees = Tache.objects.filter(statut='termine')
-
-    return render(request, 'gestion_projets/index.html', {
-        'projet': projet,
-        'taches_a_faire': taches_a_faire,
-        'taches_en_cours': taches_en_cours,
-        'taches_terminees': taches_terminees,
-    })
\ No newline at end of file
Index: Prototype/admin.py
===================================================================
diff --git a/Prototype/admin.py b/Prototype/admin.py
deleted file mode 100644
--- a/Prototype/admin.py	(revision ac784cf3b95edbd3c21877cbe757c598c38731ac)
+++ /dev/null	(revision ac784cf3b95edbd3c21877cbe757c598c38731ac)
@@ -1,11 +0,0 @@
-from django.contrib import admin
-from .models import Projet, Tache
-
-class ProjetAdmin(admin.ModelAdmin):
-    list_display = ('nom', 'description')
-    filter_horizontal = ('membres',)
-
-admin.site.register(Projet,ProjetAdmin)
-
-admin.site.register(Tache)
-
Index: Prototype/middleware.py
===================================================================
diff --git a/Prototype/middleware.py b/Prototype/middleware.py
deleted file mode 100644
--- a/Prototype/middleware.py	(revision ac784cf3b95edbd3c21877cbe757c598c38731ac)
+++ /dev/null	(revision ac784cf3b95edbd3c21877cbe757c598c38731ac)
@@ -1,17 +0,0 @@
-from django.shortcuts import redirect
-from django.conf import settings
-
-class LoginRequiredMiddleware:
-    def __init__(self, get_response):
-        self.get_response = get_response
-
-    def __call__(self, request):
-        # Vérifie si l'utilisateur n'est pas connecté
-        if not request.user.is_authenticated:
-            # Exclut certaines URLs (comme login et logout)
-            exempt_urls = [settings.LOGIN_URL, settings.LOGOUT_REDIRECT_URL]
-            if not any(request.path.startswith(url) for url in exempt_urls):
-                # Redirige vers la page de login
-                return redirect(f"{settings.LOGIN_URL}?next={request.path}")
-        # Passe la requête au middleware suivant ou à la vue
-        return self.get_response(request)
Index: Prototype/forms.py
===================================================================
diff --git a/Prototype/forms.py b/Prototype/forms.py
deleted file mode 100644
--- a/Prototype/forms.py	(revision ac784cf3b95edbd3c21877cbe757c598c38731ac)
+++ /dev/null	(revision ac784cf3b95edbd3c21877cbe757c598c38731ac)
@@ -1,8 +0,0 @@
-
-from django import forms
-from .models import Tache
-
-class TacheForm(forms.ModelForm):
-    class Meta:
-        model = Tache
-        fields = ['titre', 'description', 'responsable', 'statut']
\ No newline at end of file
Index: Prototype/apps.py
===================================================================
diff --git a/Prototype/apps.py b/Prototype/apps.py
deleted file mode 100644
--- a/Prototype/apps.py	(revision ac784cf3b95edbd3c21877cbe757c598c38731ac)
+++ /dev/null	(revision ac784cf3b95edbd3c21877cbe757c598c38731ac)
@@ -1,5 +0,0 @@
-from django.apps import AppConfig
-
-class PrototypeConfig(AppConfig):
-    default_auto_field = 'django.db.models.BigAutoField'
-    name = 'Prototype'
Index: Prototype/migrations/0001_initial.py
===================================================================
diff --git a/Prototype/migrations/0001_initial.py b/Prototype/migrations/0001_initial.py
deleted file mode 100644
--- a/Prototype/migrations/0001_initial.py	(revision ac784cf3b95edbd3c21877cbe757c598c38731ac)
+++ /dev/null	(revision ac784cf3b95edbd3c21877cbe757c598c38731ac)
@@ -1,38 +0,0 @@
-# Generated by Django 5.1.3 on 2024-11-16 20:07
-
-import django.db.models.deletion
-from django.conf import settings
-from django.db import migrations, models
-
-
-class Migration(migrations.Migration):
-
-    initial = True
-
-    dependencies = [
-        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
-    ]
-
-    operations = [
-        migrations.CreateModel(
-            name='Projet',
-            fields=[
-                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('nom', models.CharField(max_length=100)),
-                ('description', models.TextField()),
-                ('date_debut', models.DateField()),
-                ('date_fin', models.DateField()),
-            ],
-        ),
-        migrations.CreateModel(
-            name='Tache',
-            fields=[
-                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('titre', models.CharField(max_length=100)),
-                ('description', models.TextField()),
-                ('statut', models.CharField(choices=[('a_faire', 'À faire'), ('en_cours', 'En cours'), ('termine', 'Terminé')], default='a_faire', max_length=20)),
-                ('projet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Prototype.projet')),
-                ('responsable', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
-            ],
-        ),
-    ]
Index: Prototype/models.py
===================================================================
diff --git a/Prototype/models.py b/Prototype/models.py
deleted file mode 100644
--- a/Prototype/models.py	(revision ac784cf3b95edbd3c21877cbe757c598c38731ac)
+++ /dev/null	(revision ac784cf3b95edbd3c21877cbe757c598c38731ac)
@@ -1,34 +0,0 @@
-from django.db import models
-from django.contrib.auth.models import User
-
-class Projet(models.Model):
-    id = models.AutoField(primary_key=True)
-    nom = models.CharField(max_length=100)
-    description = models.TextField()
-    date_debut = models.DateField()
-    date_fin = models.DateField()
-
-    membres = models.ManyToManyField(User, related_name='projets')
-
-
-    def __str__(self):
-        return self.nom
-
-class Tache(models.Model):
-    id = models.AutoField(primary_key=True)
-    titre = models.CharField(max_length=100)
-    description = models.TextField()
-    responsable = models.ForeignKey(User, on_delete=models.CASCADE)
-    statut = models.CharField(
-        max_length=20,
-        choices=[
-            ('a_faire', 'À faire'),
-            ('en_cours', 'En cours'),
-            ('termine', 'Terminé'),
-        ],
-        default='a_faire'
-    )
-    projet = models.ForeignKey(Projet, on_delete=models.CASCADE, related_name="taches")
-
-    def __str__(self):
-        return self.titre
\ No newline at end of file
Index: ProjetGL/Prototype/admin.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.contrib import admin\r\nfrom .models import Projet, Tache\r\n\r\nadmin.site.register(Projet)\r\nadmin.site.register(Tache)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ProjetGL/Prototype/admin.py b/ProjetGL/Prototype/admin.py
--- a/ProjetGL/Prototype/admin.py	(revision ac784cf3b95edbd3c21877cbe757c598c38731ac)
+++ b/ProjetGL/Prototype/admin.py	(date 1731956058749)
@@ -1,5 +1,11 @@
 from django.contrib import admin
 from .models import Projet, Tache
 
-admin.site.register(Projet)
+class ProjetAdmin(admin.ModelAdmin):
+    list_display = ('nom', 'description')
+    filter_horizontal = ('membres',)
+
+admin.site.register(Projet,ProjetAdmin)
+
 admin.site.register(Tache)
+
Index: ProjetGL/Prototype/apps.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.apps import AppConfig\r\n\r\n\r\nclass PrototypeConfig(AppConfig):\r\n    default_auto_field = 'django.db.models.BigAutoField'\r\n    name = 'Prototype'\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ProjetGL/Prototype/apps.py b/ProjetGL/Prototype/apps.py
--- a/ProjetGL/Prototype/apps.py	(revision ac784cf3b95edbd3c21877cbe757c598c38731ac)
+++ b/ProjetGL/Prototype/apps.py	(date 1731956058781)
@@ -1,6 +1,5 @@
 from django.apps import AppConfig
 
-
 class PrototypeConfig(AppConfig):
     default_auto_field = 'django.db.models.BigAutoField'
     name = 'Prototype'
Index: .idea/projet-gl.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"PYTHON_MODULE\" version=\"4\">\r\n  <component name=\"FacetManager\">\r\n    <facet type=\"django\" name=\"Django\">\r\n      <configuration>\r\n        <option name=\"rootFolder\" value=\"$MODULE_DIR$/ProjetGL\" />\r\n        <option name=\"settingsModule\" value=\"settings.py\" />\r\n        <option name=\"manageScript\" value=\"$MODULE_DIR$/ProjetGL/manage.py\" />\r\n        <option name=\"environment\" value=\"&lt;map/&gt;\" />\r\n        <option name=\"doNotUseTestRunner\" value=\"false\" />\r\n        <option name=\"trackFilePattern\" value=\"migrations\" />\r\n      </configuration>\r\n    </facet>\r\n  </component>\r\n  <component name=\"NewModuleRootManager\">\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <sourceFolder url=\"file://$MODULE_DIR$/ProjetGL\" isTestSource=\"false\" />\r\n    </content>\r\n    <orderEntry type=\"jdk\" jdkName=\"Python 3.12\" jdkType=\"Python SDK\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n  <component name=\"PyDocumentationSettings\">\r\n    <option name=\"format\" value=\"PLAIN\" />\r\n    <option name=\"myDocStringFormat\" value=\"Plain\" />\r\n  </component>\r\n  <component name=\"TemplatesService\">\r\n    <option name=\"TEMPLATE_CONFIGURATION\" value=\"Django\" />\r\n    <option name=\"TEMPLATE_FOLDERS\">\r\n      <list>\r\n        <option value=\"$MODULE_DIR$/templates\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/projet-gl.iml b/.idea/projet-gl.iml
--- a/.idea/projet-gl.iml	(revision ac784cf3b95edbd3c21877cbe757c598c38731ac)
+++ b/.idea/projet-gl.iml	(date 1731956103390)
@@ -3,9 +3,9 @@
   <component name="FacetManager">
     <facet type="django" name="Django">
       <configuration>
-        <option name="rootFolder" value="$MODULE_DIR$/ProjetGL" />
-        <option name="settingsModule" value="settings.py" />
-        <option name="manageScript" value="$MODULE_DIR$/ProjetGL/manage.py" />
+        <option name="rootFolder" value="$MODULE_DIR$" />
+        <option name="settingsModule" value="ProjetGL/settings.py" />
+        <option name="manageScript" value="$MODULE_DIR$/manage.py" />
         <option name="environment" value="&lt;map/&gt;" />
         <option name="doNotUseTestRunner" value="false" />
         <option name="trackFilePattern" value="migrations" />
@@ -13,9 +13,7 @@
     </facet>
   </component>
   <component name="NewModuleRootManager">
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/ProjetGL" isTestSource="false" />
-    </content>
+    <content url="file://$MODULE_DIR$" />
     <orderEntry type="jdk" jdkName="Python 3.12" jdkType="Python SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
@@ -27,7 +25,7 @@
     <option name="TEMPLATE_CONFIGURATION" value="Django" />
     <option name="TEMPLATE_FOLDERS">
       <list>
-        <option value="$MODULE_DIR$/templates" />
+        <option value="$MODULE_DIR$/ProjetGL/templates" />
       </list>
     </option>
   </component>
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"VcsDirectoryMappings\">\r\n    <mapping directory=\"\" vcs=\"Git\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
--- a/.idea/vcs.xml	(revision ac784cf3b95edbd3c21877cbe757c598c38731ac)
+++ b/.idea/vcs.xml	(date 1731956104633)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="VcsDirectoryMappings">
-    <mapping directory="" vcs="Git" />
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
   </component>
 </project>
\ No newline at end of file
Index: ProjetGL/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\r\nURL configuration for ProjetGL project.\r\n\r\nThe `urlpatterns` list routes URLs to views. For more information please see:\r\n    https://docs.djangoproject.com/en/5.1/topics/http/urls/\r\nExamples:\r\nFunction views\r\n    1. Add an import:  from my_app import views\r\n    2. Add a URL to urlpatterns:  path('', views.home, name='home')\r\nClass-based views\r\n    1. Add an import:  from other_app.views import Home\r\n    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\r\nIncluding another URLconf\r\n    1. Import the include() function: from django.urls import include, path\r\n    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))\r\n\"\"\"\r\nfrom django.contrib import admin\r\nfrom django.urls import path\r\nfrom Prototype import views\r\nfrom django.contrib.auth import views as auth_views\r\nurlpatterns = [\r\n    path('admin/', admin.site.urls),\r\n    path('', views.index, name='index'),  # URL de l'accueil\r\n    path('projets/', views.liste_projets, name='liste_projets'),\r\n    path('projets/<int:projet_id>/', views.detail_projet, name='detail_projet'),\r\n    path('login/', auth_views.LoginView.as_view(template_name='login.html'), name='login'),\r\n    path('logout/', auth_views.LogoutView.as_view(), name='logout'),\r\n    path('mes_projets/<int:user_id>/', views.mes_projets, name='mes_projets'),\r\n    path('taches/delete/<int:tache_id>/',views.supprimer_tache,name='supprimer_tache'),\r\n\r\n\r\n]
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ProjetGL/urls.py b/ProjetGL/urls.py
--- a/ProjetGL/urls.py	(revision ac784cf3b95edbd3c21877cbe757c598c38731ac)
+++ b/ProjetGL/urls.py	(date 1731956058229)
@@ -26,7 +26,7 @@
     path('login/', auth_views.LoginView.as_view(template_name='login.html'), name='login'),
     path('logout/', auth_views.LogoutView.as_view(), name='logout'),
     path('mes_projets/<int:user_id>/', views.mes_projets, name='mes_projets'),
-    path('taches/delete/<int:tache_id>/',views.supprimer_tache,name='supprimer_tache'),
+    path('taches/delete/<int:tache_id>/', views.supprimer_tache, name='supprimer_tache'),
 
 
 ]
\ No newline at end of file
Index: ProjetGL/Prototype/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.db import models\r\nfrom django.db.models import F, Q, Count\r\nfrom django.contrib.auth.models import User\r\n\r\nclass Projet(models.Model):\r\n    nom = models.CharField(max_length=100)\r\n    description = models.TextField()\r\n    date_debut = models.DateField()\r\n    date_fin = models.DateField()\r\n    '''\r\n    fini = models.GeneratedField(\r\n        expression=Count(\"tache\"),\r\n        output_field=models.IntegerField(),\r\n        db_persist=True\r\n    )\r\n\r\n    nbtaches = models.GeneratedField(\r\n        expression=Count(\"tache\", filter=Q(projet=nom)),\r\n        output_field=models.IntegerField(),\r\n        db_persist=True\r\n    )\r\n    '''\r\n    def __str__(self):\r\n        return self.nom\r\n\r\nclass Tache(models.Model):\r\n    titre = models.CharField(max_length=100)\r\n    description = models.TextField()\r\n    responsable = models.ForeignKey(User, on_delete=models.CASCADE)\r\n    statut = models.CharField(\r\n        max_length=20,\r\n        choices=[\r\n            ('a_faire', 'À faire'),\r\n            ('en_cours', 'En cours'),\r\n            ('termine', 'Terminé'),\r\n        ],\r\n        default='a_faire'\r\n    )\r\n    projet = models.ForeignKey(Projet, on_delete=models.CASCADE, related_name=\"taches\")\r\n\r\n    def __str__(self):\r\n        return self.titre\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ProjetGL/Prototype/models.py b/ProjetGL/Prototype/models.py
--- a/ProjetGL/Prototype/models.py	(revision ac784cf3b95edbd3c21877cbe757c598c38731ac)
+++ b/ProjetGL/Prototype/models.py	(date 1731956058878)
@@ -1,29 +1,21 @@
 from django.db import models
-from django.db.models import F, Q, Count
 from django.contrib.auth.models import User
 
 class Projet(models.Model):
+    id = models.AutoField(primary_key=True)
     nom = models.CharField(max_length=100)
     description = models.TextField()
     date_debut = models.DateField()
     date_fin = models.DateField()
-    '''
-    fini = models.GeneratedField(
-        expression=Count("tache"),
-        output_field=models.IntegerField(),
-        db_persist=True
-    )
+
+    membres = models.ManyToManyField(User, related_name='projets')
 
-    nbtaches = models.GeneratedField(
-        expression=Count("tache", filter=Q(projet=nom)),
-        output_field=models.IntegerField(),
-        db_persist=True
-    )
-    '''
+
     def __str__(self):
         return self.nom
 
 class Tache(models.Model):
+    id = models.AutoField(primary_key=True)
     titre = models.CharField(max_length=100)
     description = models.TextField()
     responsable = models.ForeignKey(User, on_delete=models.CASCADE)
@@ -39,4 +31,4 @@
     projet = models.ForeignKey(Projet, on_delete=models.CASCADE, related_name="taches")
 
     def __str__(self):
-        return self.titre
+        return self.titre
\ No newline at end of file
Index: ProjetGL/Prototype/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.shortcuts import render, get_object_or_404\r\n\r\nfrom .models import Projet, Tache\r\n\r\ndef liste_projets(request):\r\n    projets = Projet.objects.all()\r\n    taches = Projet.objects.all()\r\n    return render(request, 'gestion_projets/liste_projets.html', {'projets': projets, 'tache': taches})\r\n\r\ndef projects_summary(request):\r\n    projects = Projet.objects.all()\r\n    return render(request, 'gestion_projets/rapport_projets.html', {'projets': projects, } )\r\n\r\ndef detail_projet(request, projet_id):\r\n    projet = get_object_or_404(Projet, id=projet_id)\r\n    taches = projet.taches.all()  # Utilise `related_name` pour accéder aux tâches\r\n    return render(request, 'gestion_projets/detail_projet.html', {'projet': projet, 'taches': taches})
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ProjetGL/Prototype/views.py b/ProjetGL/Prototype/views.py
--- a/ProjetGL/Prototype/views.py	(revision ac784cf3b95edbd3c21877cbe757c598c38731ac)
+++ b/ProjetGL/Prototype/views.py	(date 1731956058941)
@@ -1,17 +1,61 @@
-from django.shortcuts import render, get_object_or_404
-
-from .models import Projet, Tache
+from django.shortcuts import render, get_object_or_404, redirect
+from django.contrib.auth.decorators import login_required
+from .models import Projet,Tache
+from django.contrib.auth.models import User
+from .forms import TacheForm
 
+@login_required
 def liste_projets(request):
     projets = Projet.objects.all()
     taches = Projet.objects.all()
     return render(request, 'gestion_projets/liste_projets.html', {'projets': projets, 'tache': taches})
 
-def projects_summary(request):
-    projects = Projet.objects.all()
-    return render(request, 'gestion_projets/rapport_projets.html', {'projets': projects, } )
+@login_required
+def mes_projets(request,user_id):
+    user = get_object_or_404(User, id=user_id)
+    projets = user.projets.all()
+    return render(request, 'gestion_projets/mes_projets.html', {'projets' : projets})
 
+@login_required
 def detail_projet(request, projet_id):
     projet = get_object_or_404(Projet, id=projet_id)
     taches = projet.taches.all()  # Utilise `related_name` pour accéder aux tâches
-    return render(request, 'gestion_projets/detail_projet.html', {'projet': projet, 'taches': taches})
\ No newline at end of file
+
+    if request.method == 'POST':
+        form = TacheForm(request.POST)
+        if form.is_valid():
+            tache = form.save(commit=False)
+            tache.projet = projet
+            tache.save()
+            return redirect('detail_projet', projet_id=projet.id)
+    else:
+        form = TacheForm()
+
+    return render(request, 'gestion_projets/detail_projet.html', {'projet': projet, 'taches': taches, 'form' : form})
+
+def supprimer_tache(request, tache_id):
+    tache = get_object_or_404(Tache, pk=tache_id)
+    projet_id = tache.projet.id
+    tache.delete()
+    return redirect('detail_projet', projet_id=projet_id)
+
+
+def login(request):
+    return render(request, 'login.html')
+
+
+@login_required
+def index(request):
+
+    projet = Projet.objects.all()
+    # Regrouper les tâches par statut
+    taches_a_faire = Tache.objects.filter(statut='a_faire')
+    taches_en_cours = Tache.objects.filter(statut='en_cours')
+    taches_terminees = Tache.objects.filter(statut='termine')
+
+    return render(request, 'gestion_projets/index.html', {
+        'projet': projet,
+        'taches_a_faire': taches_a_faire,
+        'taches_en_cours': taches_en_cours,
+        'taches_terminees': taches_terminees,
+    })
\ No newline at end of file
Index: ProjetGL/Prototype/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ProjetGL/Prototype/urls.py b/ProjetGL/Prototype/urls.py
new file mode 100644
--- /dev/null	(date 1731956848956)
+++ b/ProjetGL/Prototype/urls.py	(date 1731956848956)
@@ -0,0 +1,32 @@
+"""
+URL configuration for ProjetGL project.
+
+The `urlpatterns` list routes URLs to views. For more information please see:
+    https://docs.djangoproject.com/en/5.1/topics/http/urls/
+Examples:
+Function views
+    1. Add an import:  from my_app import views
+    2. Add a URL to urlpatterns:  path('', views.home, name='home')
+Class-based views
+    1. Add an import:  from other_app.views import Home
+    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
+Including another URLconf
+    1. Import the include() function: from django.urls import include, path
+    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
+"""
+from django.contrib import admin
+from django.urls import path
+import views
+from django.contrib.auth import views as auth_views
+urlpatterns = [
+    path('admin/', admin.site.urls),
+    path('', views.index, name='index'),  # URL de l'accueil
+    path('projets/', views.liste_projets, name='liste_projets'),
+    path('projets/<int:projet_id>/', views.detail_projet, name='detail_projet'),
+    path('login/', auth_views.LoginView.as_view(template_name='login.html'), name='login'),
+    path('logout/', auth_views.LogoutView.as_view(), name='logout'),
+    path('mes_projets/<int:user_id>/', views.mes_projets, name='mes_projets'),
+    path('taches/delete/<int:tache_id>/', views.supprimer_tache, name='supprimer_tache'),
+
+
+]
\ No newline at end of file
diff --git a/Prototype/migrations/__init__.py b/Prototype/migrations/__init__.py
deleted file mode 100644
diff --git a/Prototype/__init__.py b/Prototype/__init__.py
deleted file mode 100644
